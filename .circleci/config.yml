# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Using Anchors to reuse the code and follow DRY principle

defaults: &defaults
  docker:
    - image: circleci/node:13.8.0


# Using commands to make the code reusable
# Commands are like functions in programming languages

# commands:
#   print_pipeline_id:
#     description: "A command to print the pipeline id"
#     parameters:
#       id:
#         type: string
#         default: "Not Available"
#     steps:
#       - run: echo << parameters.id >>
      

# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1

# Jobs section
jobs:
  # add two jobs to print hello world statement
  # First job to print hello
  # print_hello:
    # <<: *defaults
    
  #   steps:
  #     - run: echo Hello

  # Second Job to print world
  # print_world:
  #   docker:
  #     - image: circleci/node:13.8.0
    
  #   steps:
  #     - run: echo world!
  
  # Thrid Job to test environment variables
  # test_env_vars:
    # <<: *defaults
    
  #   steps:
  #     - run:
  #         name: "echo name using environment variable"
  #         command: |
  #           echo $NAME

  # Fourth Job to save the output to file
  # save_hello_world_output:
    # <<: *defaults
    
  #   steps:
  #     - run: echo "Hello World!" > ~/output.txt
      
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - output.txt

  # print_output_file:
    # <<: *defaults

  #   steps:
  #     - attach_workspace:
  #         at: ~/
      
  #     - run: cat ~/output.txt

  # Using commands job
  # print_circleci_workflow_id:
  #   <<: *defaults
  
  #   steps:
  #     - print_pipeline_id:
  #         id: $CIRCLE_WORKFLOW_ID

  #Using When condition in case of job failure
  print_hello_error:
    <<: *defaults

    steps:
      - run:
          command: eco "Hello world"
      
      - run:
          command: echo "Hello Error!"
          when: on_fail
# Orchestrate or schedule a set of jobs
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - print_hello_error
      # - print_circleci_workflow_id
      # - save_hello_world_output
      # - print_output_file:
      #     requires:
      #     - save_hello_world_output
      # # - print_hello
      # - print_world:
          # requires:
            # - print_hello
      # - test_env_vars